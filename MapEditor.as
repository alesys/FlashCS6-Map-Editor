package  {		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.geom.Point;	import flash.system.System;
		public class MapEditor extends MovieClip {				private const HERO:String 			= "hero";		private const PLATFORM:String 		= "platform";		private const ESCALERA:String 		= "escalera";		private const BACKGROUND:String		= "background";		private const TRIGGER_UP:String 	= "trigger_up";		private const TRIGGER_RIGHT:String 	= "trigger_right";		private const TRIGGER_LEFT:String 	= "trigger_left";		private const TRIGGER_JUMP:String 	= "trigger_jump";		private const TRIGGER_DOWN:String 	= "trigger_down";		private const TRIGGER_END:String	= "trigger_end";		private const START:String			= "start";				private const ZOMBIE_1:String		= "zombie_1"; // deprecated		private const ZOMBIE_2:String		= "zombie_2"; // deprecated		private const ENEMY:String			= "enemy";		private const PUERTA:String			= "puerta";		private const BLOCK:String			= "block";		private const COIN:String			= "coin";				private var string:String = stringify();		private var xml:XML;		public function MapEditor() {			XML.ignoreWhitespace = true;			XML.prettyPrinting = true;			xml = <chapters></chapters>;					}		public function addNode(chapter:int, scene:int):void		{			stop();			addEventListener(Event.ENTER_FRAME, handle_addNode);						function handle_addNode():void			{				removeEventListener(Event.ENTER_FRAME, handle_addNode);				var chap:XML;				if ( !xml.chapter )				{					chap = <chapter></chapter>;					xml.appendChild( chap );				}								if ( !xml.chapter[chapter] )				{					chap = <chapter></chapter>;					xml.appendChild( chap );				}								var scen:XML								if ( !xml.chapter[chapter].scene )				{					scen = <scene></scene>;					xml.chapter[chapter].appendChild(scen);				}								if ( !xml.chapter[chapter].scene[scene] )				{					scen = <scene></scene>;					xml.chapter[chapter].appendChild(scen);				}								string = stringify();				var level:XML = new XML("<level>"+string+"</level>");				xml.chapter[chapter].scene[scene].appendChild(level);				play();			}		}		public function getXML():String		{			var output:String = '<?xml version="1.0" encoding="UTF-8"?>' + xml.toString();			System.setClipboard(output);			return output;		}		private function stringify():String		{						var output:Vector.<Object> 	= new Vector.<Object>();			var type:String;			var obj:Object;			var item:DisplayObject;			for(var i:int=0; i<numChildren; i++)			{								item 					= getChildAt(i);				if (item)				{					if ( item is hero_walk ) 			type = HERO;					if ( item is platform ) 			type = PLATFORM;					if ( item is escalera ) 			type = ESCALERA;					if ( item is background )			type = BACKGROUND;					if ( item is trigger_up ) 			type = TRIGGER_UP;					if ( item is trigger_down) 			type = TRIGGER_DOWN;					if ( item is trigger_right) 		type = TRIGGER_RIGHT;					if ( item is start_trigger_right) 	type = TRIGGER_RIGHT;					if ( item is trigger_left) 			type = TRIGGER_LEFT;					if ( item is start_trigger_left) 	type = TRIGGER_LEFT;					if ( item is trigger_jump) 			type = TRIGGER_JUMP;					if ( item is trigger_end)			type = TRIGGER_END;					if ( item is puerta)				type = PUERTA;					if ( item is Enemy ) 				type = ENEMY;					if ( item is block ) 				type = BLOCK;					if ( item is coin ) 				type = COIN;										obj = getItem(item, 	type);										if ( item is start_trigger_right || item is start_trigger_left ) obj.start = true;					if ( item is Enemy ) 					{						obj.id 		= (item as Enemy).id;						obj.sentido = (item as Enemy).sentido;						obj.param	= (item as Enemy).param;					}					if ( item is coin )					{						obj.delay   = item['delay'];					}										if ( obj.type )						output.push(obj);				}			}			return JSON.stringify(output);		}		private function getCenter(item:DisplayObject):Point		{			return new Point( item.x + (item.width >> 1), 							 item.y + (item.height >> 1));		}				private function getItem(item:DisplayObject, type:String):Object		{			return {				x: Math.round(item.x),				y: Math.round(item.y),				width: Math.round(item.width),				height: Math.round(item.height),				type:type			}		}		private function getItemBox2D(item:DisplayObject, type:String):Object		{			return {				x: Math.round(item.x + (item.width >> 1)),				y: Math.round(item.y + (item.height >> 1)),				width: Math.round(item.width),				height: Math.round(item.height),				type:type			}		}	}	}